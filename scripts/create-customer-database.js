#!/usr/bin/env node

/**
 * üè• T·∫†O DATABASE SETUP CHO KH√ÅCH H√ÄNG M·ªöI
 * 
 * Script t·ªïng h·ª£p ƒë·ªÉ t·∫°o file setup database cho kh√°ch h√†ng m·ªõi.
 * T·ª± ƒë·ªông ch·ªçn ph∆∞∆°ng ph√°p t·ªët nh·∫•t (Supabase CLI ho·∫∑c migration files).
 * 
 * Usage:
 *   node scripts/create-customer-database.js
 *   # Ho·∫∑c v·ªõi tham s·ªë:
 *   node scripts/create-customer-database.js "B·ªánh vi·ªán ABC"
 */

const fs = require('fs');
const path = require('path');
const readline = require('readline');
const { execSync } = require('child_process');

// Color utilities
const colors = {
  reset: '\x1b[0m',
  bright: '\x1b[1m',
  red: '\x1b[31m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  magenta: '\x1b[35m',
  cyan: '\x1b[36m'
};

function log(message, color = colors.reset) {
  console.log(`${color}${message}${colors.reset}`);
}

function logSuccess(message) {
  log(`‚úÖ ${message}`, colors.green);
}

function logError(message) {
  log(`‚ùå ${message}`, colors.red);
}

function logWarning(message) {
  log(`‚ö†Ô∏è  ${message}`, colors.yellow);
}

function logInfo(message) {
  log(`‚ÑπÔ∏è  ${message}`, colors.blue);
}

// Create readline interface
const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

// Prompt user for input
function askQuestion(question) {
  return new Promise((resolve) => {
    rl.question(question, (answer) => {
      resolve(answer.trim());
    });
  });
}

// Check if Supabase CLI is available
function checkSupabaseCLI() {
  try {
    execSync('supabase --version', { stdio: 'pipe' });
    return true;
  } catch (error) {
    return false;
  }
}

// Check if user is logged in to Supabase
function checkSupabaseLogin() {
  try {
    execSync('supabase projects list', { stdio: 'pipe' });
    return true;
  } catch (error) {
    return false;
  }
}

// Generate safe filename from customer name
function generateFilename(customerName) {
  const safeName = customerName
    .toLowerCase()
    .replace(/[^a-z0-9\s]/g, '') // Remove special characters
    .replace(/\s+/g, '-') // Replace spaces with hyphens
    .replace(/^-+|-+$/g, ''); // Remove leading/trailing hyphens
  
  return `setup-${safeName}.sql`;
}

// Validate customer name
function validateCustomerName(name) {
  if (!name || name.length < 3) {
    return 'T√™n kh√°ch h√†ng ph·∫£i c√≥ √≠t nh·∫•t 3 k√Ω t·ª±';
  }
  if (name.length > 100) {
    return 'T√™n kh√°ch h√†ng kh√¥ng ƒë∆∞·ª£c qu√° 100 k√Ω t·ª±';
  }
  return null;
}

// Run export using Supabase CLI
function runSupabaseExport(customerName, filename) {
  try {
    log('üöÄ S·ª≠ d·ª•ng Supabase CLI ƒë·ªÉ export schema...');
    
    // Run the export script
    execSync(`node scripts/export-supabase-schema.js --customer="${customerName}" --output="${filename}"`, {
      stdio: 'inherit'
    });
    
    return true;
  } catch (error) {
    logError(`L·ªói khi export b·∫±ng Supabase CLI: ${error.message}`);
    return false;
  }
}

// Run export using migration files
function runMigrationExport(customerName, filename) {
  try {
    log('üìÑ S·ª≠ d·ª•ng migration files ƒë·ªÉ t·∫°o schema...');
    
    // Run the package script
    execSync(`node scripts/package-database-schema.js --customer="${customerName}" --output="${filename}"`, {
      stdio: 'inherit'
    });
    
    return true;
  } catch (error) {
    logError(`L·ªói khi t·∫°o schema t·ª´ migration files: ${error.message}`);
    return false;
  }
}

// Main function
async function createCustomerDatabase() {
  log(`${colors.blue}${colors.bright}üè• T·∫†O DATABASE SETUP CHO KH√ÅCH H√ÄNG M·ªöI${colors.reset}\n`);
  
  try {
    // Step 1: Get customer name
    let customerName = process.argv[2];
    
    if (!customerName) {
      log('Vui l√≤ng nh·∫≠p th√¥ng tin kh√°ch h√†ng:\n');
      
      while (true) {
        customerName = await askQuestion('üìù T√™n kh√°ch h√†ng (VD: B·ªánh vi·ªán ƒêa khoa ABC): ');
        
        const validation = validateCustomerName(customerName);
        if (validation) {
          logError(validation);
          continue;
        }
        break;
      }
    }
    
    // Step 2: Generate filename
    const filename = generateFilename(customerName);
    
    // Step 3: Check available methods
    log('\nüîç Ki·ªÉm tra ph∆∞∆°ng ph√°p export c√≥ s·∫µn...');
    
    const hasSupabaseCLI = checkSupabaseCLI();
    const isLoggedIn = hasSupabaseCLI ? checkSupabaseLogin() : false;
    
    if (hasSupabaseCLI) {
      logSuccess('Supabase CLI ƒë√£ ƒë∆∞·ª£c c√†i ƒë·∫∑t');
      if (isLoggedIn) {
        logSuccess('ƒê√£ ƒëƒÉng nh·∫≠p Supabase');
      } else {
        logWarning('Ch∆∞a ƒëƒÉng nh·∫≠p Supabase');
      }
    } else {
      logWarning('Supabase CLI ch∆∞a ƒë∆∞·ª£c c√†i ƒë·∫∑t');
    }
    
    // Step 4: Choose method
    let useSupabaseCLI = false;
    
    if (hasSupabaseCLI && isLoggedIn) {
      log('\nüìã Th√¥ng tin setup:');
      log(`   Kh√°ch h√†ng: ${colors.green}${customerName}${colors.reset}`);
      log(`   File output: ${colors.green}${filename}${colors.reset}`);
      log(`   Ph∆∞∆°ng ph√°p: ${colors.green}Supabase CLI (Khuy·∫øn ngh·ªã)${colors.reset}`);
      
      const confirm = await askQuestion('\n‚ùì S·ª≠ d·ª•ng Supabase CLI ƒë·ªÉ export? (Y/n): ');
      useSupabaseCLI = confirm.toLowerCase() !== 'n' && confirm.toLowerCase() !== 'no';
    } else {
      log('\nüìã Th√¥ng tin setup:');
      log(`   Kh√°ch h√†ng: ${colors.green}${customerName}${colors.reset}`);
      log(`   File output: ${colors.green}${filename}${colors.reset}`);
      log(`   Ph∆∞∆°ng ph√°p: ${colors.yellow}Migration files (Fallback)${colors.reset}`);
      
      if (!hasSupabaseCLI) {
        logInfo('üí° ƒê·ªÉ c√≥ k·∫øt qu·∫£ ch√≠nh x√°c h∆°n, h√£y c√†i ƒë·∫∑t Supabase CLI:');
        logInfo('   node scripts/setup-supabase-cli.js');
      } else if (!isLoggedIn) {
        logInfo('üí° ƒê·ªÉ s·ª≠ d·ª•ng Supabase CLI, h√£y ƒëƒÉng nh·∫≠p:');
        logInfo('   supabase login');
      }
      
      const confirm = await askQuestion('\n‚ùì Ti·∫øp t·ª•c v·ªõi migration files? (y/N): ');
      if (confirm.toLowerCase() !== 'y' && confirm.toLowerCase() !== 'yes') {
        log('\n‚ùå ƒê√£ h·ªßy t·∫°o file setup.');
        rl.close();
        return;
      }
    }
    
    // Close readline before running scripts
    rl.close();
    
    // Step 5: Run export
    log(`\nüöÄ B·∫Øt ƒë·∫ßu t·∫°o file setup...\n`);
    
    let success = false;
    
    if (useSupabaseCLI) {
      success = runSupabaseExport(customerName, filename);
      
      // Fallback to migration files if Supabase CLI fails
      if (!success) {
        logWarning('Supabase CLI th·∫•t b·∫°i, chuy·ªÉn sang s·ª≠ d·ª•ng migration files...');
        success = runMigrationExport(customerName, filename);
      }
    } else {
      success = runMigrationExport(customerName, filename);
    }
    
    // Step 6: Show results
    if (success) {
      log(`\n${colors.green}${colors.bright}üéâ HO√ÄN T·∫§T T·∫†O FILE SETUP${colors.reset}`);
      log(`\nüìÅ File ƒë√£ ƒë∆∞·ª£c t·∫°o: ${colors.green}${filename}${colors.reset}`);
      
      // Check file size
      if (fs.existsSync(filename)) {
        const stats = fs.statSync(filename);
        log(`üìä K√≠ch th∆∞·ªõc file: ${Math.round(stats.size / 1024)} KB`);
      }
      
      log(`\nüîÑ C√°c b∆∞·ªõc ti·∫øp theo:`);
      log(`   1. G·ª≠i file ${filename} cho kh√°ch h√†ng`);
      log(`   2. H∆∞·ªõng d·∫´n kh√°ch h√†ng t·∫°o project Supabase m·ªõi`);
      log(`   3. Ch·∫°y file SQL trong Supabase SQL Editor`);
      log(`   4. C·∫≠p nh·∫≠t .env.local v·ªõi th√¥ng tin Supabase m·ªõi`);
      log(`   5. Test ƒëƒÉng nh·∫≠p v√† c√°c ch·ª©c nƒÉng c∆° b·∫£n`);
      
      log(`\n‚ö†Ô∏è  L∆∞u √Ω quan tr·ªçng:`);
      log(`   - ƒê·ªïi m·∫≠t kh·∫©u m·∫∑c ƒë·ªãnh ngay sau khi setup`);
      log(`   - Backup database ƒë·ªãnh k·ª≥`);
      log(`   - Kh√¥ng chia s·∫ª th√¥ng tin k·∫øt n·ªëi database`);
      
    } else {
      logError('Kh√¥ng th·ªÉ t·∫°o file setup. Vui l√≤ng ki·ªÉm tra l·∫°i c·∫•u h√¨nh.');
      process.exit(1);
    }
    
  } catch (error) {
    logError(`L·ªói khi t·∫°o database setup: ${error.message}`);
    rl.close();
    process.exit(1);
  }
}

// Handle process termination
process.on('SIGINT', () => {
  log('\n\n‚ùå ƒê√£ h·ªßy t·∫°o file setup.');
  rl.close();
  process.exit(0);
});

// Run the script
if (require.main === module) {
  createCustomerDatabase();
}

module.exports = { createCustomerDatabase };
