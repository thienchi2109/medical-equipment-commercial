#!/usr/bin/env node

/**
 * üì¶ EXPORT SUPABASE SCHEMA USING CLI
 * 
 * Script n√†y s·ª≠ d·ª•ng Supabase CLI ƒë·ªÉ export ch√≠nh x√°c to√†n b·ªô database schema
 * v√† t·∫°o file setup ho√†n ch·ªânh cho kh√°ch h√†ng m·ªõi.
 * 
 * Y√™u c·∫ßu:
 * - Supabase CLI ƒë√£ ƒë∆∞·ª£c c√†i ƒë·∫∑t
 * - File .env.local ho·∫∑c .env v·ªõi th√¥ng tin Supabase
 * 
 * Usage:
 *   node scripts/export-supabase-schema.js --customer="B·ªánh vi·ªán ABC"
 */

const fs = require('fs');
const path = require('path');
const { execSync } = require('child_process');

// Color utilities
const colors = {
  reset: '\x1b[0m',
  bright: '\x1b[1m',
  red: '\x1b[31m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  magenta: '\x1b[35m',
  cyan: '\x1b[36m'
};

function log(message, color = colors.reset) {
  console.log(`${color}${message}${colors.reset}`);
}

function logStep(step, message) {
  log(`\n${colors.cyan}${colors.bright}üîÑ B∆∞·ªõc ${step}: ${message}${colors.reset}`);
}

function logSuccess(message) {
  log(`‚úÖ ${message}`, colors.green);
}

function logError(message) {
  log(`‚ùå ${message}`, colors.red);
}

function logWarning(message) {
  log(`‚ö†Ô∏è  ${message}`, colors.yellow);
}

// Parse command line arguments
function parseArgs() {
  const args = process.argv.slice(2);
  const config = {
    customer: 'B·ªánh vi·ªán Demo',
    output: 'database-setup-complete.sql'
  };
  
  args.forEach(arg => {
    if (arg.startsWith('--')) {
      const [key, value] = arg.substring(2).split('=');
      if (value) {
        config[key] = value.replace(/['"]/g, '');
      }
    }
  });
  
  return config;
}

// Check if Supabase CLI is installed
function checkSupabaseCLI() {
  try {
    execSync('supabase --version', { stdio: 'pipe' });
    return true;
  } catch (error) {
    return false;
  }
}

// Load environment variables
function loadEnvVars() {
  const envFiles = ['.env.local', '.env'];
  let envVars = {};
  
  for (const envFile of envFiles) {
    if (fs.existsSync(envFile)) {
      const content = fs.readFileSync(envFile, 'utf8');
      const lines = content.split('\n');
      
      for (const line of lines) {
        const trimmed = line.trim();
        if (trimmed && !trimmed.startsWith('#')) {
          const [key, ...valueParts] = trimmed.split('=');
          if (key && valueParts.length > 0) {
            envVars[key.trim()] = valueParts.join('=').trim().replace(/['"]/g, '');
          }
        }
      }
      break;
    }
  }
  
  return envVars;
}

// Export schema using Supabase CLI
function exportSchema() {
  try {
    log('ƒêang export schema t·ª´ Supabase...');
    
    // Export schema only (structure)
    const schemaOutput = execSync('supabase db dump --schema-only', { 
      encoding: 'utf8',
      stdio: 'pipe'
    });
    
    logSuccess('ƒê√£ export schema th√†nh c√¥ng');
    return schemaOutput;
  } catch (error) {
    throw new Error(`L·ªói khi export schema: ${error.message}`);
  }
}

// Export data using Supabase CLI
function exportData() {
  try {
    log('ƒêang export d·ªØ li·ªáu t·ª´ Supabase...');
    
    // Export data only
    const dataOutput = execSync('supabase db dump --data-only', { 
      encoding: 'utf8',
      stdio: 'pipe'
    });
    
    logSuccess('ƒê√£ export d·ªØ li·ªáu th√†nh c√¥ng');
    return dataOutput;
  } catch (error) {
    logWarning(`Kh√¥ng th·ªÉ export d·ªØ li·ªáu: ${error.message}`);
    return '';
  }
}

// Generate sample data for new customer
function generateSampleData(customerName) {
  const customerCode = customerName.replace(/\s+/g, '_').toUpperCase().substring(0, 10);
  
  return `
-- =====================================================
-- D·ªÆ LI·ªÜU M·∫™U CHO ${customerName}
-- =====================================================

-- X√≥a d·ªØ li·ªáu m·∫´u c≈© n·∫øu c√≥
DELETE FROM lich_su_thiet_bi WHERE thiet_bi_id IN (SELECT id FROM thiet_bi WHERE ma_thiet_bi LIKE 'DEMO_%');
DELETE FROM cong_viec_bao_tri WHERE thiet_bi_id IN (SELECT id FROM thiet_bi WHERE ma_thiet_bi LIKE 'DEMO_%');
DELETE FROM ke_hoach_bao_tri WHERE thiet_bi_id IN (SELECT id FROM thiet_bi WHERE ma_thiet_bi LIKE 'DEMO_%');
DELETE FROM thiet_bi WHERE ma_thiet_bi LIKE 'DEMO_%';
DELETE FROM nhan_vien WHERE username LIKE 'demo_%' OR username = 'admin';
DELETE FROM phong_ban WHERE ten_phong_ban LIKE '%Demo%';
DELETE FROM loai_thiet_bi WHERE ten_loai LIKE '%demo%';

-- T·∫°o d·ªØ li·ªáu m·∫´u m·ªõi
-- (D·ªØ li·ªáu n√†y s·∫Ω ƒë∆∞·ª£c t√πy ch·ªânh theo kh√°ch h√†ng)

-- Th√¥ng b√°o
SELECT 'D·ªØ li·ªáu m·∫´u ƒë√£ ƒë∆∞·ª£c t·∫°o cho ${customerName}' as message;
`;
}

// Generate setup instructions
function generateSetupInstructions(customerName, outputFile) {
  return `
-- =====================================================
-- H∆Ø·ªöNG D·∫™N SETUP DATABASE CHO ${customerName}
-- =====================================================

/*
üöÄ H∆Ø·ªöNG D·∫™N S·ª¨ D·ª§NG FILE N√ÄY:

1. T·∫†O PROJECT SUPABASE M·ªöI:
   - Truy c·∫≠p https://supabase.com/dashboard
   - T·∫°o project m·ªõi v·ªõi t√™n "${customerName}"
   - Ch·ªù project ƒë∆∞·ª£c kh·ªüi t·∫°o ho√†n t·∫•t

2. CH·∫†Y SCRIPT SETUP:
   C√°ch 1 - S·ª≠ d·ª•ng Supabase Dashboard (Khuy·∫øn ngh·ªã):
   - V√†o SQL Editor trong dashboard
   - Copy to√†n b·ªô n·ªôi dung file ${outputFile}
   - Paste v√†o SQL Editor v√† ch·∫°y

   C√°ch 2 - S·ª≠ d·ª•ng Supabase CLI:
   supabase db reset --db-url "postgresql://postgres:[PASSWORD]@[HOST]:5432/postgres"

   C√°ch 3 - S·ª≠ d·ª•ng psql:
   psql "postgresql://postgres:[PASSWORD]@[HOST]:5432/postgres" -f ${outputFile}

3. C·∫¨P NH·∫¨T .ENV.LOCAL:
   NEXT_PUBLIC_SUPABASE_URL=https://[your-project-ref].supabase.co
   NEXT_PUBLIC_SUPABASE_ANON_KEY=[your-anon-key]
   SUPABASE_SERVICE_ROLE_KEY=[your-service-role-key]

4. KI·ªÇM TRA K·∫æT N·ªêI:
   - Ch·∫°y ·ª©ng d·ª•ng: npm run dev
   - ƒêƒÉng nh·∫≠p v·ªõi t√†i kho·∫£n admin c√≥ s·∫µn
   - Ki·ªÉm tra c√°c ch·ª©c nƒÉng c∆° b·∫£n

‚ö†Ô∏è  L∆ØU √ù QUAN TR·ªåNG:
   - File n√†y ch·ª©a to√†n b·ªô c·∫•u tr√∫c database hi·ªán t·∫°i
   - D·ªØ li·ªáu nh·∫°y c·∫£m ƒë√£ ƒë∆∞·ª£c lo·∫°i b·ªè
   - ƒê·ªïi m·∫≠t kh·∫©u m·∫∑c ƒë·ªãnh ngay sau khi setup
   - Backup database ƒë·ªãnh k·ª≥

üìû H·ªñ TR·ª¢:
   N·∫øu g·∫∑p v·∫•n ƒë·ªÅ, vui l√≤ng li√™n h·ªá team ph√°t tri·ªÉn.
*/

`;
}

// Main function
function exportSupabaseSchema() {
  const config = parseArgs();
  
  log(`${colors.blue}${colors.bright}üì¶ EXPORT SUPABASE SCHEMA B·∫∞NG CLI${colors.reset}\n`);
  log(`${colors.blue}Kh√°ch h√†ng: ${config.customer}${colors.reset}`);
  log(`${colors.blue}File output: ${config.output}${colors.reset}\n`);
  
  try {
    // Step 1: Check prerequisites
    logStep(1, 'Ki·ªÉm tra y√™u c·∫ßu h·ªá th·ªëng');
    
    if (!checkSupabaseCLI()) {
      throw new Error('Supabase CLI ch∆∞a ƒë∆∞·ª£c c√†i ƒë·∫∑t. Vui l√≤ng c√†i ƒë·∫∑t: npm install -g supabase');
    }
    logSuccess('Supabase CLI ƒë√£ s·∫µn s√†ng');
    
    // Step 2: Load environment variables
    logStep(2, 'ƒê·ªçc th√¥ng tin k·∫øt n·ªëi');
    const envVars = loadEnvVars();
    
    if (!envVars.NEXT_PUBLIC_SUPABASE_URL) {
      logWarning('Kh√¥ng t√¨m th·∫•y NEXT_PUBLIC_SUPABASE_URL trong .env');
      log('ƒê·∫£m b·∫£o b·∫°n ƒë√£ login Supabase CLI: supabase login');
    } else {
      logSuccess('ƒê√£ t√¨m th·∫•y th√¥ng tin k·∫øt n·ªëi Supabase');
    }
    
    // Step 3: Export schema
    logStep(3, 'Export database schema');
    const schema = exportSchema();
    
    // Step 4: Export existing data (optional)
    logStep(4, 'Export d·ªØ li·ªáu hi·ªán t·∫°i (t√πy ch·ªçn)');
    const existingData = exportData();
    
    // Step 5: Generate complete setup file
    logStep(5, 'T·∫°o file setup ho√†n ch·ªânh');
    
    let completeSetup = `-- =====================================================
-- DATABASE SETUP HO√ÄN CH·ªàNH CHO ${config.customer}
-- ƒê∆∞·ª£c export t·ª´ Supabase hi·ªán t·∫°i b·∫±ng CLI
-- Ng√†y t·∫°o: ${new Date().toLocaleString('vi-VN')}
-- =====================================================

-- Thi·∫øt l·∫≠p m√¥i tr∆∞·ªùng
SET timezone = 'Asia/Ho_Chi_Minh';
SET client_encoding = 'UTF8';

-- B·∫Øt ƒë·∫ßu transaction
BEGIN;

-- =====================================================
-- SCHEMA (C·∫•u tr√∫c database)
-- =====================================================

${schema}

-- =====================================================
-- D·ªÆ LI·ªÜU HI·ªÜN T·∫†I (N·∫øu c√≥)
-- =====================================================

${existingData}

${generateSampleData(config.customer)}

-- Commit transaction
COMMIT;

-- Ki·ªÉm tra k·∫øt qu·∫£
SELECT 
  'Setup database ho√†n t·∫•t!' as status,
  COUNT(*) as total_tables
FROM information_schema.tables 
WHERE table_schema = 'public' 
  AND table_type = 'BASE TABLE';

${generateSetupInstructions(config.customer, config.output)}
`;

    // Step 6: Write output file
    logStep(6, 'Ghi file output');
    const outputPath = path.join(__dirname, '..', config.output);
    fs.writeFileSync(outputPath, completeSetup, 'utf8');
    
    logSuccess(`File ƒë√£ ƒë∆∞·ª£c t·∫°o: ${config.output}`);
    
    // Step 7: Show summary
    log(`\n${colors.green}${colors.bright}üéâ HO√ÄN T·∫§T EXPORT SCHEMA${colors.reset}`);
    log(`\nüìä Th·ªëng k√™:`);
    log(`  - K√≠ch th∆∞·ªõc schema: ${Math.round(schema.length / 1024)} KB`);
    log(`  - K√≠ch th∆∞·ªõc d·ªØ li·ªáu: ${Math.round(existingData.length / 1024)} KB`);
    log(`  - T·ªïng k√≠ch th∆∞·ªõc: ${Math.round(completeSetup.length / 1024)} KB`);
    log(`  - Kh√°ch h√†ng: ${config.customer}`);
    log(`  - File output: ${config.output}`);
    
    log(`\nüöÄ B∆∞·ªõc ti·∫øp theo:`);
    log(`  1. Ki·ªÉm tra file ${config.output}`);
    log(`  2. T·∫°o project Supabase m·ªõi cho kh√°ch h√†ng`);
    log(`  3. Ch·∫°y file SQL trong Supabase SQL Editor`);
    log(`  4. C·∫≠p nh·∫≠t .env.local v·ªõi th√¥ng tin m·ªõi`);
    log(`  5. Test ·ª©ng d·ª•ng`);
    
  } catch (error) {
    logError(`L·ªói khi export schema: ${error.message}`);
    
    if (error.message.includes('supabase')) {
      log(`\nüí° G·ª£i √Ω kh·∫Øc ph·ª•c:`);
      log(`  1. C√†i ƒë·∫∑t Supabase CLI: npm install -g supabase`);
      log(`  2. ƒêƒÉng nh·∫≠p: supabase login`);
      log(`  3. Ki·ªÉm tra k·∫øt n·ªëi: supabase projects list`);
      log(`  4. Link project: supabase link --project-ref [your-project-ref]`);
    }
    
    process.exit(1);
  }
}

// Run the exporter
if (require.main === module) {
  exportSupabaseSchema();
}

module.exports = { exportSupabaseSchema };
