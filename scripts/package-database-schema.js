#!/usr/bin/env node

/**
 * üì¶ PACKAGE COMPLETE DATABASE SCHEMA FOR NEW SUPABASE SETUP
 * 
 * Script n√†y t·∫°o ra m·ªôt file SQL ho√†n ch·ªânh ch·ª©a to√†n b·ªô database schema
 * ƒë·ªÉ setup tr√™n t√†i kho·∫£n Supabase m·ªõi. Ch·ªâ c·∫ßn thay ƒë·ªïi bi·∫øn m√¥i tr∆∞·ªùng
 * trong .env.local l√† c√≥ th·ªÉ ch·∫°y ƒë∆∞·ª£c ngay.
 * 
 * T√≠nh nƒÉng:
 * - K·∫øt h·ª£p t·∫•t c·∫£ migration files th√†nh 1 file SQL duy nh·∫•t
 * - T·∫°o sample data ph√π h·ª£p cho kh√°ch h√†ng m·ªõi
 * - T·ªëi ∆∞u h√≥a th·ª© t·ª± th·ª±c thi ƒë·ªÉ tr√°nh l·ªói dependency
 * - Bao g·ªìm indexes v√† performance optimizations
 * - T·ª± ƒë·ªông t·∫°o user accounts m·∫∑c ƒë·ªãnh
 * 
 * Usage:
 *   node scripts/package-database-schema.js --customer="B·ªánh vi·ªán ABC" --output="setup-abc.sql"
 */

const fs = require('fs');
const path = require('path');

// Color utilities for console output
const colors = {
  reset: '\x1b[0m',
  bright: '\x1b[1m',
  red: '\x1b[31m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  magenta: '\x1b[35m',
  cyan: '\x1b[36m'
};

function log(message, color = colors.reset) {
  console.log(`${color}${message}${colors.reset}`);
}

function logStep(step, message) {
  log(`\n${colors.cyan}${colors.bright}üîÑ B∆∞·ªõc ${step}: ${message}${colors.reset}`);
}

function logSuccess(message) {
  log(`‚úÖ ${message}`, colors.green);
}

function logError(message) {
  log(`‚ùå ${message}`, colors.red);
}

function logWarning(message) {
  log(`‚ö†Ô∏è  ${message}`, colors.yellow);
}

// Parse command line arguments
function parseArgs() {
  const args = process.argv.slice(2);
  const config = {
    customer: 'B·ªánh vi·ªán Demo',
    output: 'database-setup-complete.sql'
  };
  
  args.forEach(arg => {
    if (arg.startsWith('--')) {
      const [key, value] = arg.substring(2).split('=');
      if (value) {
        config[key] = value.replace(/['"]/g, ''); // Remove quotes
      }
    }
  });
  
  return config;
}

// Get all migration files in correct order
function getMigrationFiles() {
  const migrationsDir = path.join(__dirname, '../supabase/migrations');
  
  if (!fs.existsSync(migrationsDir)) {
    throw new Error('Th∆∞ m·ª•c migrations kh√¥ng t·ªìn t·∫°i');
  }
  
  const files = fs.readdirSync(migrationsDir)
    .filter(file => file.endsWith('.sql'))
    .sort(); // Files c√≥ timestamp n√™n sort s·∫Ω ƒë√∫ng th·ª© t·ª±
  
  return files.map(file => ({
    name: file,
    path: path.join(migrationsDir, file),
    content: fs.readFileSync(path.join(migrationsDir, file), 'utf8')
  }));
}

// Clean and optimize SQL content
function processSQLContent(content, fileName) {
  // Remove comment separators
  content = content.replace(/^-- =+.*$/gm, '');
  
  // Remove excessive blank lines
  content = content.replace(/\n\s*\n\s*\n/g, '\n\n');
  
  // Remove ANALYZE statements (will be added at the end)
  content = content.replace(/^ANALYZE\s+.*;$/gm, '');
  
  // Add file header
  const header = `\n-- =====================================================\n-- ${fileName}\n-- =====================================================\n`;
  
  return header + content.trim() + '\n';
}

// Generate comprehensive sample data
function generateSampleData(customerName) {
  const customerCode = customerName.replace(/\s+/g, '_').toUpperCase().substring(0, 10);
  const currentYear = new Date().getFullYear();
  
  return `
-- =====================================================
-- D·ªÆ LI·ªÜU M·∫™U CHO ${customerName}
-- =====================================================

-- 1. T·∫°o c√°c ph√≤ng ban m·∫´u
INSERT INTO phong_ban (ten_phong_ban, mo_ta) VALUES
('Ban Gi√°m ƒë·ªëc', 'Ban Gi√°m ƒë·ªëc b·ªánh vi·ªán'),
('Khoa N·ªôi', 'Khoa N·ªôi t·ªïng h·ª£p'),
('Khoa Ngo·∫°i', 'Khoa Ngo·∫°i t·ªïng h·ª£p'),
('Khoa S·∫£n', 'Khoa S·∫£n ph·ª• khoa'),
('Khoa Nhi', 'Khoa Nhi'),
('Khoa C·∫•p c·ª©u', 'Khoa C·∫•p c·ª©u'),
('Ph√≤ng X√©t nghi·ªám', 'Ph√≤ng X√©t nghi·ªám'),
('Ph√≤ng Ch·∫©n ƒëo√°n h√¨nh ·∫£nh', 'Ph√≤ng CƒêHA'),
('Ph√≤ng Ph·∫´u thu·∫≠t', 'Ph√≤ng Ph·∫´u thu·∫≠t'),
('Khoa D∆∞·ª£c', 'Khoa D∆∞·ª£c'),
('Ph√≤ng K·∫ø ho·∫°ch t·ªïng h·ª£p', 'Ph√≤ng KHTC'),
('T·ªï Qu·∫£n l√Ω thi·∫øt b·ªã', 'T·ªï QLTB tr·ª±c thu·ªôc KHTC')
ON CONFLICT (ten_phong_ban) DO NOTHING;

-- 2. T·∫°o c√°c lo·∫°i thi·∫øt b·ªã m·∫´u
INSERT INTO loai_thiet_bi (ten_loai, mo_ta) VALUES
('Thi·∫øt b·ªã y t·∫ø chung', 'Thi·∫øt b·ªã y t·∫ø s·ª≠ d·ª•ng chung'),
('M√°y x√©t nghi·ªám', 'M√°y x√©t nghi·ªám c√°c lo·∫°i'),
('M√°y ch·∫©n ƒëo√°n h√¨nh ·∫£nh', 'M√°y X-quang, CT, MRI, si√™u √¢m'),
('Thi·∫øt b·ªã ph·∫´u thu·∫≠t', 'Thi·∫øt b·ªã ph·∫´u thu·∫≠t v√† can thi·ªáp'),
('Thi·∫øt b·ªã h·ªìi s·ª©c', 'Thi·∫øt b·ªã h·ªìi s·ª©c c·∫•p c·ª©u'),
('Thi·∫øt b·ªã theo d√µi', 'Thi·∫øt b·ªã theo d√µi b·ªánh nh√¢n'),
('Thi·∫øt b·ªã th√¥ng tin', 'M√°y t√≠nh, m√°y in, thi·∫øt b·ªã IT'),
('Thi·∫øt b·ªã v·∫≠n chuy·ªÉn', 'Xe ƒë·∫©y, c√°ng, thi·∫øt b·ªã v·∫≠n chuy·ªÉn')
ON CONFLICT (ten_loai) DO NOTHING;

-- 3. T·∫°o t√†i kho·∫£n ng∆∞·ªùi d√πng m·∫´u
INSERT INTO nhan_vien (username, password, full_name, role, khoa_phong) VALUES
('admin', 'admin123', 'Qu·∫£n tr·ªã vi√™n h·ªá th·ªëng', 'admin', 'Ban Gi√°m ƒë·ªëc'),
('to_qltb', 'qltb123', 'Tr∆∞·ªüng t·ªï QLTB', 'to_qltb', 'T·ªï Qu·∫£n l√Ω thi·∫øt b·ªã'),
('qltb_noi', 'qltb123', 'QLTB Khoa N·ªôi', 'qltb_khoa', 'Khoa N·ªôi'),
('qltb_ngoai', 'qltb123', 'QLTB Khoa Ngo·∫°i', 'qltb_khoa', 'Khoa Ngo·∫°i'),
('qltb_san', 'qltb123', 'QLTB Khoa S·∫£n', 'qltb_khoa', 'Khoa S·∫£n'),
('qltb_nhi', 'qltb123', 'QLTB Khoa Nhi', 'qltb_khoa', 'Khoa Nhi'),
('qltb_cc', 'qltb123', 'QLTB C·∫•p c·ª©u', 'qltb_khoa', 'Khoa C·∫•p c·ª©u'),
('qltb_xn', 'qltb123', 'QLTB X√©t nghi·ªám', 'qltb_khoa', 'Ph√≤ng X√©t nghi·ªám'),
('qltb_cdha', 'qltb123', 'QLTB CƒêHA', 'qltb_khoa', 'Ph√≤ng Ch·∫©n ƒëo√°n h√¨nh ·∫£nh'),
('user_demo', 'user123', 'Nh√¢n vi√™n demo', 'user', 'Khoa N·ªôi')
ON CONFLICT (username) DO NOTHING;

-- 4. T·∫°o thi·∫øt b·ªã m·∫´u
INSERT INTO thiet_bi (
  ma_thiet_bi, ten_thiet_bi, model, serial, hang_san_xuat, noi_san_xuat, nam_san_xuat,
  khoa_phong_quan_ly, vi_tri_lap_dat, nguoi_dang_truc_tiep_quan_ly, tinh_trang_hien_tai,
  ngay_nhap, ngay_dua_vao_su_dung, nguon_kinh_phi, gia_goc, han_bao_hanh,
  cau_hinh_thiet_bi, phu_kien_kem_theo, ghi_chu,
  chu_ky_bt_dinh_ky, ngay_bt_tiep_theo
) VALUES
-- Thi·∫øt b·ªã Khoa N·ªôi
('${customerCode}_001', 'M√°y si√™u √¢m tim', 'Vivid E95', 'VE95001', 'GE Healthcare', 'M·ªπ', ${currentYear - 1}, 'Khoa N·ªôi', 'Ph√≤ng kh√°m tim m·∫°ch', 'BS. Nguy·ªÖn VƒÉn A', 'Ho·∫°t ƒë·ªông', CURRENT_DATE - INTERVAL '1 year', CURRENT_DATE - INTERVAL '11 months', 'Ng√¢n s√°ch nh√† n∆∞·ªõc', 2500000000, CURRENT_DATE + INTERVAL '1 year', 'M√†n h√¨nh LCD 19 inch, ƒë·∫ßu d√≤ tim m·∫°ch', 'Gel si√™u √¢m, t√∫i ƒë·ª±ng ƒë·∫ßu d√≤', 'Thi·∫øt b·ªã ho·∫°t ƒë·ªông t·ªët', 6, CURRENT_DATE + INTERVAL '3 months'),
('${customerCode}_002', 'M√°y ƒëi·ªán tim 12 c·∫ßn', 'MAC 2000', 'MAC2000002', 'GE Healthcare', 'M·ªπ', ${currentYear}, 'Khoa N·ªôi', 'Ph√≤ng kh√°m tim m·∫°ch', 'BS. Nguy·ªÖn VƒÉn A', 'Ho·∫°t ƒë·ªông', CURRENT_DATE - INTERVAL '6 months', CURRENT_DATE - INTERVAL '5 months', 'Ng√¢n s√°ch nh√† n∆∞·ªõc', 150000000, CURRENT_DATE + INTERVAL '18 months', 'M√°y in nhi·ªát, 12 c·∫ßn ƒëo', 'Gi·∫•y in ECG, c√°p k·∫øt n·ªëi', 'Thi·∫øt b·ªã m·ªõi', 3, CURRENT_DATE + INTERVAL '1 month'),

-- Thi·∫øt b·ªã CƒêHA
('${customerCode}_003', 'M√°y X-quang k·ªπ thu·∫≠t s·ªë', 'Ysio Max', 'YM2021003', 'Siemens', 'ƒê·ª©c', ${currentYear - 2}, 'Ph√≤ng Ch·∫©n ƒëo√°n h√¨nh ·∫£nh', 'Ph√≤ng X-quang 1', 'KTV. Tr·∫ßn Th·ªã B', 'Ho·∫°t ƒë·ªông', CURRENT_DATE - INTERVAL '2 years', CURRENT_DATE - INTERVAL '23 months', 'V·ªën ODA', 3500000000, CURRENT_DATE + INTERVAL '6 months', 'Detector ph·∫≥ng 43x43cm, b√†n ch·ª•p di ƒë·ªông', '√Åo ch√¨ b·∫£o v·ªá, marker kim lo·∫°i', 'C·∫ßn hi·ªáu chu·∫©n ƒë·ªãnh k·ª≥', 12, CURRENT_DATE + INTERVAL '2 months'),
('${customerCode}_004', 'M√°y CT 64 l√°t c·∫Øt', 'SOMATOM go.Top', 'SGT2023004', 'Siemens', 'ƒê·ª©c', ${currentYear - 1}, 'Ph√≤ng Ch·∫©n ƒëo√°n h√¨nh ·∫£nh', 'Ph√≤ng CT', 'KTV. Tr·∫ßn Th·ªã B', 'Ho·∫°t ƒë·ªông', CURRENT_DATE - INTERVAL '1 year', CURRENT_DATE - INTERVAL '10 months', 'V·ªën ODA', 8500000000, CURRENT_DATE + INTERVAL '2 years', 'Gantry 70cm, b√†n b·ªánh nh√¢n carbon fiber', 'Thu·ªëc c·∫£n quang, b∆°m ti√™m t·ª± ƒë·ªông', 'Thi·∫øt b·ªã cao c·∫•p', 6, CURRENT_DATE + INTERVAL '4 months'),

-- Thi·∫øt b·ªã X√©t nghi·ªám
('${customerCode}_005', 'M√°y x√©t nghi·ªám m√°u t·ª± ƒë·ªông', 'DxH 900', 'DXH900005', 'Beckman Coulter', 'M·ªπ', ${currentYear}, 'Ph√≤ng X√©t nghi·ªám', 'Khu v·ª±c huy·∫øt h·ªçc', 'KTV. L√™ VƒÉn C', 'Ho·∫°t ƒë·ªông', CURRENT_DATE - INTERVAL '3 months', CURRENT_DATE - INTERVAL '2 months', 'Ng√¢n s√°ch nh√† n∆∞·ªõc', 1800000000, CURRENT_DATE + INTERVAL '2 years', 'Throughput 90 m·∫´u/gi·ªù, 29 th√¥ng s·ªë', 'Reagent pack, control sample', 'Thi·∫øt b·ªã m·ªõi nh·∫≠p', 3, CURRENT_DATE + INTERVAL '1 month'),
('${customerCode}_006', 'M√°y x√©t nghi·ªám sinh h√≥a', 'AU5800', 'AU5800006', 'Beckman Coulter', 'Nh·∫≠t B·∫£n', ${currentYear - 1}, 'Ph√≤ng X√©t nghi·ªám', 'Khu v·ª±c sinh h√≥a', 'KTV. L√™ VƒÉn C', 'Ho·∫°t ƒë·ªông', CURRENT_DATE - INTERVAL '8 months', CURRENT_DATE - INTERVAL '7 months', 'Ng√¢n s√°ch nh√† n∆∞·ªõc', 2200000000, CURRENT_DATE + INTERVAL '1 year', 'Throughput 5400 test/gi·ªù, ISE t√≠ch h·ª£p', 'Reagent cartridge, cuvette', 'Ho·∫°t ƒë·ªông ·ªïn ƒë·ªãnh', 3, CURRENT_DATE + INTERVAL '2 months'),

-- Thi·∫øt b·ªã C·∫•p c·ª©u
('${customerCode}_007', 'M√°y th·ªü', 'Servo-i', 'SI2021007', 'Maquet', 'Th·ª•y ƒêi·ªÉn', ${currentYear - 3}, 'Khoa C·∫•p c·ª©u', 'Ph√≤ng h·ªìi s·ª©c', 'BS. Ph·∫°m VƒÉn D', 'Ho·∫°t ƒë·ªông', CURRENT_DATE - INTERVAL '3 years', CURRENT_DATE - INTERVAL '35 months', 'Ng√¢n s√°ch nh√† n∆∞·ªõc', 800000000, CURRENT_DATE - INTERVAL '1 year', 'M√†n h√¨nh c·∫£m ·ª©ng 15 inch, NAVA mode', 'Circuit th·ªü, humidifier', 'C·∫ßn b·∫£o tr√¨ g·∫•p', 3, CURRENT_DATE + INTERVAL '1 month'),
('${customerCode}_008', 'M√°y monitor ƒëa th√¥ng s·ªë', 'IntelliVue MX800', 'MX800008', 'Philips', 'H√† Lan', ${currentYear - 1}, 'Khoa C·∫•p c·ª©u', 'Ph√≤ng theo d√µi', 'BS. Ph·∫°m VƒÉn D', 'Ho·∫°t ƒë·ªông', CURRENT_DATE - INTERVAL '1 year', CURRENT_DATE - INTERVAL '11 months', 'Ng√¢n s√°ch nh√† n∆∞·ªõc', 150000000, CURRENT_DATE + INTERVAL '1 year', 'M√†n h√¨nh 19 inch, 8 s√≥ng hi·ªÉn th·ªã', 'C√°p k·∫øt n·ªëi, sensor SpO2', 'Thi·∫øt b·ªã ·ªïn ƒë·ªãnh', 6, CURRENT_DATE + INTERVAL '3 months'),

-- Thi·∫øt b·ªã Ph·∫´u thu·∫≠t
('${customerCode}_009', 'M√°y g√¢y m√™', 'Aisys CS2', 'ACS2009', 'GE Healthcare', 'M·ªπ', ${currentYear - 2}, 'Ph√≤ng Ph·∫´u thu·∫≠t', 'Ph√≤ng m·ªï 1', 'BS. Ho√†ng Th·ªã E', 'Ho·∫°t ƒë·ªông', CURRENT_DATE - INTERVAL '2 years', CURRENT_DATE - INTERVAL '23 months', 'V·ªën ODA', 1200000000, CURRENT_DATE + INTERVAL '6 months', 'Ventilator t√≠ch h·ª£p, vaporizer Sevoflurane', 'Circuit g√¢y m√™, mask th·ªü', 'Thi·∫øt b·ªã quan tr·ªçng', 6, CURRENT_DATE + INTERVAL '2 months'),
('${customerCode}_010', 'ƒê√®n m·ªï LED', 'Lucea 300', 'LC300010', 'Trumpf', 'ƒê·ª©c', ${currentYear}, 'Ph√≤ng Ph·∫´u thu·∫≠t', 'Ph√≤ng m·ªï 1', 'BS. Ho√†ng Th·ªã E', 'Ho·∫°t ƒë·ªông', CURRENT_DATE - INTERVAL '4 months', CURRENT_DATE - INTERVAL '3 months', 'Ng√¢n s√°ch nh√† n∆∞·ªõc', 450000000, CURRENT_DATE + INTERVAL '2 years', 'LED 160.000 lux, ƒëi·ªÅu khi·ªÉn c·∫£m ·ª©ng', 'Tay ƒëi·ªÅu khi·ªÉn v√¥ tr√πng, camera HD', 'Thi·∫øt b·ªã hi·ªán ƒë·∫°i', 12, CURRENT_DATE + INTERVAL '6 months')

ON CONFLICT (ma_thiet_bi) DO NOTHING;

-- 5. T·∫°o k·∫ø ho·∫°ch b·∫£o tr√¨ m·∫´u
INSERT INTO ke_hoach_bao_tri (
  thiet_bi_id, loai_bao_tri, mo_ta, ngay_bat_dau, ngay_ket_thuc,
  chu_ky_lap_lai, trang_thai, nguoi_phu_trach_id
) VALUES
-- B·∫£o tr√¨ thi·∫øt b·ªã CƒêHA
((SELECT id FROM thiet_bi WHERE ma_thiet_bi = '${customerCode}_003'), 'Hi·ªáu chu·∫©n', 'Hi·ªáu chu·∫©n m√°y X-quang ƒë·ªãnh k·ª≥', CURRENT_DATE + INTERVAL '1 month', CURRENT_DATE + INTERVAL '1 month', 12, 'da_lap_lich', (SELECT id FROM nhan_vien WHERE username = 'qltb_cdha')),
((SELECT id FROM thiet_bi WHERE ma_thiet_bi = '${customerCode}_004'), 'B·∫£o tr√¨ ƒë·ªãnh k·ª≥', 'B·∫£o tr√¨ m√°y CT ƒë·ªãnh k·ª≥', CURRENT_DATE + INTERVAL '2 months', CURRENT_DATE + INTERVAL '2 months', 6, 'da_lap_lich', (SELECT id FROM nhan_vien WHERE username = 'qltb_cdha')),

-- B·∫£o tr√¨ thi·∫øt b·ªã x√©t nghi·ªám
((SELECT id FROM thiet_bi WHERE ma_thiet_bi = '${customerCode}_005'), 'B·∫£o tr√¨ ƒë·ªãnh k·ª≥', 'B·∫£o tr√¨ m√°y x√©t nghi·ªám m√°u', CURRENT_DATE + INTERVAL '15 days', CURRENT_DATE + INTERVAL '15 days', 3, 'da_lap_lich', (SELECT id FROM nhan_vien WHERE username = 'qltb_xn')),
((SELECT id FROM thiet_bi WHERE ma_thiet_bi = '${customerCode}_006'), 'Hi·ªáu chu·∫©n', 'Hi·ªáu chu·∫©n m√°y sinh h√≥a', CURRENT_DATE + INTERVAL '1 month', CURRENT_DATE + INTERVAL '1 month', 6, 'da_lap_lich', (SELECT id FROM nhan_vien WHERE username = 'qltb_xn')),

-- B·∫£o tr√¨ thi·∫øt b·ªã c·∫•p c·ª©u
((SELECT id FROM thiet_bi WHERE ma_thiet_bi = '${customerCode}_007'), 'B·∫£o tr√¨ ƒë·ªãnh k·ª≥', 'B·∫£o tr√¨ m√°y th·ªü ƒë·ªãnh k·ª≥', CURRENT_DATE + INTERVAL '10 days', CURRENT_DATE + INTERVAL '10 days', 3, 'da_lap_lich', (SELECT id FROM nhan_vien WHERE username = 'qltb_cc')),
((SELECT id FROM thiet_bi WHERE ma_thiet_bi = '${customerCode}_008'), 'B·∫£o tr√¨ ƒë·ªãnh k·ª≥', 'B·∫£o tr√¨ monitor ƒëa th√¥ng s·ªë', CURRENT_DATE + INTERVAL '20 days', CURRENT_DATE + INTERVAL '20 days', 6, 'da_lap_lich', (SELECT id FROM nhan_vien WHERE username = 'qltb_cc'))

ON CONFLICT DO NOTHING;

-- 6. T·∫°o m·ªôt s·ªë c√¥ng vi·ªác b·∫£o tr√¨ m·∫´u
INSERT INTO cong_viec_bao_tri (
  ke_hoach_id, thiet_bi_id, ten_cong_viec, mo_ta,
  ngay_thuc_hien_du_kien, trang_thai, nguoi_thuc_hien_id,
  thang_1_hoan_thanh, thang_2_hoan_thanh, thang_3_hoan_thanh
) VALUES
((SELECT id FROM ke_hoach_bao_tri WHERE thiet_bi_id = (SELECT id FROM thiet_bi WHERE ma_thiet_bi = '${customerCode}_005') LIMIT 1),
 (SELECT id FROM thiet_bi WHERE ma_thiet_bi = '${customerCode}_005'),
 'Ki·ªÉm tra v√† v·ªá sinh m√°y x√©t nghi·ªám m√°u',
 'V·ªá sinh b√™n ngo√†i, ki·ªÉm tra c√°c b·ªô ph·∫≠n ch√≠nh',
 CURRENT_DATE + INTERVAL '15 days',
 'chua_thuc_hien',
 (SELECT id FROM nhan_vien WHERE username = 'qltb_xn'),
 true, false, false),

((SELECT id FROM ke_hoach_bao_tri WHERE thiet_bi_id = (SELECT id FROM thiet_bi WHERE ma_thiet_bi = '${customerCode}_007') LIMIT 1),
 (SELECT id FROM thiet_bi WHERE ma_thiet_bi = '${customerCode}_007'),
 'Ki·ªÉm tra h·ªá th·ªëng m√°y th·ªü',
 'Ki·ªÉm tra √°p su·∫•t, l∆∞u l∆∞·ª£ng, c·∫£m bi·∫øn',
 CURRENT_DATE + INTERVAL '10 days',
 'chua_thuc_hien',
 (SELECT id FROM nhan_vien WHERE username = 'qltb_cc'),
 true, true, false)

ON CONFLICT DO NOTHING;

-- 7. T·∫°o m·ªôt s·ªë l·ªãch s·ª≠ thi·∫øt b·ªã m·∫´u
INSERT INTO lich_su_thiet_bi (
  thiet_bi_id, ngay_thuc_hien, loai_su_kien, mo_ta, chi_tiet
) VALUES
((SELECT id FROM thiet_bi WHERE ma_thiet_bi = '${customerCode}_001'), CURRENT_DATE - INTERVAL '1 year', 'Nh·∫≠p kho', 'Nh·∫≠p thi·∫øt b·ªã m·ªõi', 'M√°y si√™u √¢m tim Vivid E95 ƒë∆∞·ª£c nh·∫≠p kho v√† ki·ªÉm tra ban ƒë·∫ßu'),
((SELECT id FROM thiet_bi WHERE ma_thiet_bi = '${customerCode}_001'), CURRENT_DATE - INTERVAL '11 months', 'ƒê∆∞a v√†o s·ª≠ d·ª•ng', 'B·∫Øt ƒë·∫ßu s·ª≠ d·ª•ng', 'M√°y si√™u √¢m ƒë∆∞·ª£c ƒë∆∞a v√†o s·ª≠ d·ª•ng t·∫°i Khoa N·ªôi'),
((SELECT id FROM thiet_bi WHERE ma_thiet_bi = '${customerCode}_003'), CURRENT_DATE - INTERVAL '2 years', 'Nh·∫≠p kho', 'Nh·∫≠p thi·∫øt b·ªã m·ªõi', 'M√°y X-quang k·ªπ thu·∫≠t s·ªë ƒë∆∞·ª£c nh·∫≠p kho'),
((SELECT id FROM thiet_bi WHERE ma_thiet_bi = '${customerCode}_003'), CURRENT_DATE - INTERVAL '23 months', 'ƒê∆∞a v√†o s·ª≠ d·ª•ng', 'B·∫Øt ƒë·∫ßu s·ª≠ d·ª•ng', 'M√°y X-quang ƒë∆∞·ª£c l·∫Øp ƒë·∫∑t v√† ƒë∆∞a v√†o s·ª≠ d·ª•ng'),
((SELECT id FROM thiet_bi WHERE ma_thiet_bi = '${customerCode}_005'), CURRENT_DATE - INTERVAL '3 months', 'Nh·∫≠p kho', 'Nh·∫≠p thi·∫øt b·ªã m·ªõi', 'M√°y x√©t nghi·ªám m√°u t·ª± ƒë·ªông ƒë∆∞·ª£c nh·∫≠p kho'),
((SELECT id FROM thiet_bi WHERE ma_thiet_bi = '${customerCode}_005'), CURRENT_DATE - INTERVAL '2 months', 'ƒê∆∞a v√†o s·ª≠ d·ª•ng', 'B·∫Øt ƒë·∫ßu s·ª≠ d·ª•ng', 'M√°y x√©t nghi·ªám ƒë∆∞·ª£c ƒë∆∞a v√†o s·ª≠ d·ª•ng t·∫°i Ph√≤ng XN')

ON CONFLICT DO NOTHING;

-- 8. C·∫≠p nh·∫≠t th·ªëng k√™ ƒë·ªÉ t·ªëi ∆∞u hi·ªáu su·∫•t
ANALYZE phong_ban;
ANALYZE loai_thiet_bi;
ANALYZE nhan_vien;
ANALYZE thiet_bi;
ANALYZE ke_hoach_bao_tri;
ANALYZE cong_viec_bao_tri;
ANALYZE lich_su_thiet_bi;

-- 9. Th√¥ng b√°o ho√†n th√†nh
SELECT
  'D·ªØ li·ªáu m·∫´u ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng cho ${customerName}!' as status,
  COUNT(DISTINCT pb.id) as so_phong_ban,
  COUNT(DISTINCT ltb.id) as so_loai_thiet_bi,
  COUNT(DISTINCT nv.id) as so_nhan_vien,
  COUNT(DISTINCT tb.id) as so_thiet_bi,
  COUNT(DISTINCT khbt.id) as so_ke_hoach_bao_tri
FROM phong_ban pb, loai_thiet_bi ltb, nhan_vien nv, thiet_bi tb, ke_hoach_bao_tri khbt;
`;
}

// Generate setup instructions
function generateSetupInstructions(customerName, outputFile) {
  return `
-- =====================================================
-- H∆Ø·ªöNG D·∫™N SETUP DATABASE CHO ${customerName}
-- =====================================================

/*
üöÄ H∆Ø·ªöNG D·∫™N S·ª¨ D·ª§NG:

1. T·∫†O PROJECT SUPABASE M·ªöI:
   - Truy c·∫≠p https://supabase.com/dashboard
   - T·∫°o project m·ªõi v·ªõi t√™n "${customerName}"
   - Ch·ªù project ƒë∆∞·ª£c kh·ªüi t·∫°o ho√†n t·∫•t

2. L·∫§Y TH√îNG TIN K·∫æT N·ªêI:
   - V√†o Settings > Database
   - Copy Connection string (URI)
   - V√†o Settings > API
   - Copy Project URL v√† anon public key

3. CH·∫†Y SCRIPT SETUP:
   C√°ch 1 - S·ª≠ d·ª•ng Supabase Dashboard:
   - V√†o SQL Editor trong dashboard
   - Copy to√†n b·ªô n·ªôi dung file ${outputFile}
   - Paste v√†o SQL Editor v√† ch·∫°y

   C√°ch 2 - S·ª≠ d·ª•ng psql:
   psql "postgresql://postgres:[YOUR-PASSWORD]@[YOUR-HOST]:5432/postgres" -f ${outputFile}

   C√°ch 3 - S·ª≠ d·ª•ng Supabase CLI:
   supabase db reset --db-url "postgresql://postgres:[YOUR-PASSWORD]@[YOUR-HOST]:5432/postgres"

4. C·∫¨P NH·∫¨T .ENV.LOCAL:
   NEXT_PUBLIC_SUPABASE_URL=https://[your-project-ref].supabase.co
   NEXT_PUBLIC_SUPABASE_ANON_KEY=[your-anon-key]
   SUPABASE_SERVICE_ROLE_KEY=[your-service-role-key]

5. KI·ªÇM TRA K·∫æT N·ªêI:
   - Ch·∫°y ·ª©ng d·ª•ng: npm run dev
   - ƒêƒÉng nh·∫≠p v·ªõi t√†i kho·∫£n: admin / admin123
   - Ki·ªÉm tra c√°c ch·ª©c nƒÉng c∆° b·∫£n

üìã T√ÄI KHO·∫¢N M·∫∂C ƒê·ªäNH:
   - admin / admin123 (Qu·∫£n tr·ªã vi√™n)
   - to_qltb / qltb123 (Tr∆∞·ªüng t·ªï QLTB)
   - qltb_noi / qltb123 (QLTB Khoa N·ªôi)
   - qltb_cdha / qltb123 (QLTB CƒêHA)
   - user_demo / user123 (Nh√¢n vi√™n demo)

‚ö†Ô∏è  L∆ØU √ù B·∫¢O M·∫¨T:
   - ƒê·ªïi m·∫≠t kh·∫©u m·∫∑c ƒë·ªãnh ngay sau khi setup
   - Kh√¥ng chia s·∫ª th√¥ng tin k·∫øt n·ªëi database
   - Backup database ƒë·ªãnh k·ª≥

üéØ T√çNH NƒÇNG ƒê√É SETUP:
   ‚úÖ Qu·∫£n l√Ω thi·∫øt b·ªã y t·∫ø
   ‚úÖ L·∫≠p k·∫ø ho·∫°ch b·∫£o tr√¨
   ‚úÖ Theo d√µi s·ª≠a ch·ªØa
   ‚úÖ Lu√¢n chuy·ªÉn thi·∫øt b·ªã
   ‚úÖ B√°o c√°o v√† th·ªëng k√™
   ‚úÖ Ph√¢n quy·ªÅn ng∆∞·ªùi d√πng
   ‚úÖ L·ªãch s·ª≠ ho·∫°t ƒë·ªông
   ‚úÖ T·ªëi ∆∞u hi·ªáu su·∫•t

üìû H·ªñ TR·ª¢:
   N·∫øu g·∫∑p v·∫•n ƒë·ªÅ trong qu√° tr√¨nh setup, vui l√≤ng li√™n h·ªá team ph√°t tri·ªÉn.
*/
`;
}

// Main function to package complete database schema
function packageDatabaseSchema() {
  const config = parseArgs();

  log(`${colors.blue}${colors.bright}üì¶ ƒê√ìNG G√ìI DATABASE SCHEMA CHO SUPABASE M·ªöI${colors.reset}\n`);
  log(`${colors.blue}Kh√°ch h√†ng: ${config.customer}${colors.reset}`);
  log(`${colors.blue}File output: ${config.output}${colors.reset}\n`);

  try {
    // Step 1: Get migration files
    logStep(1, 'ƒê·ªçc c√°c file migration');
    const migrationFiles = getMigrationFiles();
    logSuccess(`T√¨m th·∫•y ${migrationFiles.length} file migration`);

    // Step 2: Build complete schema
    logStep(2, 'T·∫°o schema ho√†n ch·ªânh');

    let completeSchema = `-- =====================================================
-- DATABASE SETUP HO√ÄN CH·ªàNH CHO ${config.customer}
-- ƒê∆∞·ª£c t·∫°o t·ª± ƒë·ªông t·ª´ t·∫•t c·∫£ migration files
-- Ng√†y t·∫°o: ${new Date().toLocaleString('vi-VN')}
-- =====================================================

-- B·∫≠t c√°c extension c·∫ßn thi·∫øt
CREATE EXTENSION IF NOT EXISTS "uuid-ossp";
CREATE EXTENSION IF NOT EXISTS "pgcrypto";
CREATE EXTENSION IF NOT EXISTS "pg_trgm";

-- Thi·∫øt l·∫≠p timezone
SET timezone = 'Asia/Ho_Chi_Minh';

-- Thi·∫øt l·∫≠p encoding
SET client_encoding = 'UTF8';

-- B·∫Øt ƒë·∫ßu transaction ƒë·ªÉ ƒë·∫£m b·∫£o t√≠nh to√†n v·∫πn
BEGIN;

`;

    // Step 3: Process migration files
    logStep(3, 'X·ª≠ l√Ω c√°c file migration');
    let processedCount = 0;

    for (const file of migrationFiles) {
      log(`  üìÑ X·ª≠ l√Ω: ${file.name}`);

      try {
        const processedContent = processSQLContent(file.content, file.name);
        completeSchema += processedContent + '\n';
        processedCount++;
      } catch (error) {
        logWarning(`B·ªè qua file ${file.name}: ${error.message}`);
      }
    }

    logSuccess(`ƒê√£ x·ª≠ l√Ω ${processedCount}/${migrationFiles.length} file migration`);

    // Step 4: Add sample data
    logStep(4, 'T·∫°o d·ªØ li·ªáu m·∫´u');
    const sampleData = generateSampleData(config.customer);
    completeSchema += sampleData;
    logSuccess('ƒê√£ t·∫°o d·ªØ li·ªáu m·∫´u');

    // Step 5: Add final verification and commit
    completeSchema += `
-- =====================================================
-- HO√ÄN T·∫§T SETUP V√Ä KI·ªÇM TRA
-- =====================================================

-- Commit transaction
COMMIT;

-- Ki·ªÉm tra k·∫øt qu·∫£ setup
SELECT
  'Setup database ho√†n t·∫•t!' as status,
  COUNT(*) as total_tables
FROM information_schema.tables
WHERE table_schema = 'public'
  AND table_type = 'BASE TABLE';

-- Hi·ªÉn th·ªã danh s√°ch b·∫£ng ƒë√£ t·∫°o
SELECT
  table_name as "T√™n b·∫£ng",
  CASE
    WHEN table_name LIKE '%thiet_bi%' THEN 'Qu·∫£n l√Ω thi·∫øt b·ªã'
    WHEN table_name LIKE '%nhan_vien%' THEN 'Qu·∫£n l√Ω ng∆∞·ªùi d√πng'
    WHEN table_name LIKE '%bao_tri%' THEN 'B·∫£o tr√¨'
    WHEN table_name LIKE '%sua_chua%' THEN 'S·ª≠a ch·ªØa'
    WHEN table_name LIKE '%luan_chuyen%' THEN 'Lu√¢n chuy·ªÉn'
    WHEN table_name LIKE '%phong_ban%' THEN 'Ph√≤ng ban'
    WHEN table_name LIKE '%loai%' THEN 'Danh m·ª•c'
    ELSE 'Kh√°c'
  END as "Nh√≥m ch·ª©c nƒÉng"
FROM information_schema.tables
WHERE table_schema = 'public'
  AND table_type = 'BASE TABLE'
ORDER BY "Nh√≥m ch·ª©c nƒÉng", table_name;

-- Hi·ªÉn th·ªã th·ªëng k√™ d·ªØ li·ªáu m·∫´u
SELECT
  'Th·ªëng k√™ d·ªØ li·ªáu m·∫´u' as "Lo·∫°i th·ªëng k√™",
  (SELECT COUNT(*) FROM phong_ban) as "Ph√≤ng ban",
  (SELECT COUNT(*) FROM loai_thiet_bi) as "Lo·∫°i thi·∫øt b·ªã",
  (SELECT COUNT(*) FROM nhan_vien) as "Ng∆∞·ªùi d√πng",
  (SELECT COUNT(*) FROM thiet_bi) as "Thi·∫øt b·ªã",
  (SELECT COUNT(*) FROM ke_hoach_bao_tri) as "K·∫ø ho·∫°ch BT";

-- Th√¥ng b√°o ho√†n th√†nh
SELECT 'üéâ Database ƒë√£ s·∫µn s√†ng s·ª≠ d·ª•ng cho ${config.customer}!' as "K·∫øt qu·∫£";
`;

    // Step 6: Add setup instructions
    const instructions = generateSetupInstructions(config.customer, config.output);
    completeSchema += instructions;

    // Step 7: Write output file
    logStep(5, 'Ghi file output');
    const outputPath = path.join(__dirname, '..', config.output);
    fs.writeFileSync(outputPath, completeSchema, 'utf8');

    logSuccess(`File ƒë√£ ƒë∆∞·ª£c t·∫°o: ${config.output}`);

    // Step 8: Show summary
    log(`\n${colors.green}${colors.bright}üéâ HO√ÄN T·∫§T ƒê√ìNG G√ìI DATABASE SCHEMA${colors.reset}`);
    log(`\nüìä Th·ªëng k√™:`);
    log(`  - File migration ƒë√£ x·ª≠ l√Ω: ${processedCount}`);
    log(`  - K√≠ch th∆∞·ªõc file: ${Math.round(completeSchema.length / 1024)} KB`);
    log(`  - Kh√°ch h√†ng: ${config.customer}`);
    log(`  - File output: ${config.output}`);

    log(`\nüöÄ B∆∞·ªõc ti·∫øp theo:`);
    log(`  1. T·∫°o project Supabase m·ªõi`);
    log(`  2. Ch·∫°y file ${config.output} trong SQL Editor`);
    log(`  3. C·∫≠p nh·∫≠t .env.local v·ªõi th√¥ng tin Supabase m·ªõi`);
    log(`  4. ƒêƒÉng nh·∫≠p v·ªõi t√†i kho·∫£n admin/admin123`);
    log(`  5. ƒê·ªïi m·∫≠t kh·∫©u m·∫∑c ƒë·ªãnh`);

  } catch (error) {
    logError(`L·ªói khi ƒë√≥ng g√≥i schema: ${error.message}`);
    console.error(error);
    process.exit(1);
  }
}

// Run the packager
if (require.main === module) {
  packageDatabaseSchema();
}

module.exports = {
  packageDatabaseSchema,
  generateSampleData,
  generateSetupInstructions
};
