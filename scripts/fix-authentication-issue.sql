-- =====================================================
-- FIX AUTHENTICATION ISSUES
-- Script ƒë·ªÉ kh·∫Øc ph·ª•c v·∫•n ƒë·ªÅ ƒëƒÉng nh·∫≠p v·ªõi t√†i kho·∫£n m·ªõi
-- =====================================================

-- B∆∞·ªõc 1: Ki·ªÉm tra xem h√†m authenticate_user_dual_mode c√≥ t·ªìn t·∫°i kh√¥ng
SELECT 
    'FUNCTION CHECK' as check_type,
    proname as function_name,
    CASE 
        WHEN proname = 'authenticate_user_dual_mode' THEN '‚úÖ Function exists'
        ELSE '‚ùå Function missing'
    END as status
FROM pg_proc 
WHERE proname = 'authenticate_user_dual_mode';

-- N·∫øu kh√¥ng c√≥ k·∫øt qu·∫£, nghƒ©a l√† h√†m ch∆∞a ƒë∆∞·ª£c t·∫°o

-- B∆∞·ªõc 2: Ki·ªÉm tra c·∫•u tr√∫c b·∫£ng nhan_vien
SELECT 
    'TABLE STRUCTURE' as check_type,
    column_name,
    data_type,
    is_nullable,
    column_default
FROM information_schema.columns 
WHERE table_name = 'nhan_vien' 
AND table_schema = 'public'
ORDER BY ordinal_position;

-- B∆∞·ªõc 3: Ki·ªÉm tra t√†i kho·∫£n ntchi/admin
SELECT 
    'USER CHECK' as check_type,
    id,
    username,
    full_name,
    role,
    khoa_phong,
    CASE 
        WHEN password IS NULL THEN '‚ùå No password'
        WHEN password = '' THEN '‚ùå Empty password'
        WHEN password = 'admin' THEN '‚ö†Ô∏è Plain text password'
        WHEN password = 'hashed password' THEN '‚úÖ Hashed password marker'
        ELSE '‚ö†Ô∏è Plain text: ' || LEFT(password, 10) || '...'
    END as password_status,
    CASE 
        WHEN hashed_password IS NULL THEN '‚ùå No hashed password'
        WHEN hashed_password = '' THEN '‚ùå Empty hashed password'
        WHEN hashed_password LIKE '$2%' THEN '‚úÖ Bcrypt hash'
        ELSE '‚ö†Ô∏è Unknown hash format'
    END as hashed_password_status
FROM nhan_vien 
WHERE username = 'ntchi';

-- B∆∞·ªõc 4: T·∫°o h√†m authenticate_user_dual_mode n·∫øu ch∆∞a c√≥
CREATE OR REPLACE FUNCTION authenticate_user_dual_mode(
  p_username TEXT,
  p_password TEXT
)
RETURNS TABLE(
  user_id INTEGER,
  username TEXT,
  full_name TEXT,
  role TEXT,
  khoa_phong TEXT,
  is_authenticated BOOLEAN,
  authentication_mode TEXT
)
LANGUAGE plpgsql
SECURITY DEFINER
AS $$
DECLARE
  user_record RECORD;
  password_valid BOOLEAN := FALSE;
  auth_mode TEXT := 'unknown';
BEGIN
  -- Find user by username
  SELECT id, nv.username, nv.full_name, nv.role, nv.khoa_phong, nv.password, nv.hashed_password
  INTO user_record
  FROM nhan_vien nv
  WHERE nv.username = p_username;

  -- Check if user exists
  IF user_record.id IS NULL THEN
    RETURN QUERY SELECT
      NULL::INTEGER,
      p_username::TEXT,
      NULL::TEXT,
      NULL::TEXT,
      NULL::TEXT,
      FALSE,
      'user_not_found'::TEXT;
    RETURN;
  END IF;

  -- üö® SECURITY: Block suspicious password attempts
  IF p_password = 'hashed password' OR
     p_password ILIKE '%hash%' OR
     p_password ILIKE '%crypt%' OR
     LENGTH(p_password) > 200 THEN
    RETURN QUERY SELECT
      user_record.id,
      user_record.username::TEXT,
      user_record.full_name::TEXT,
      user_record.role::TEXT,
      user_record.khoa_phong::TEXT,
      FALSE,
      'blocked_suspicious'::TEXT;
    RETURN;
  END IF;

  -- Try hashed password authentication first (preferred method)
  IF user_record.hashed_password IS NOT NULL AND user_record.hashed_password != '' THEN
    password_valid := (user_record.hashed_password = crypt(p_password, user_record.hashed_password));
    IF password_valid THEN
      auth_mode := 'hashed';
    END IF;
  END IF;

  -- Fallback to plain text password (legacy compatibility)
  IF NOT password_valid AND user_record.password IS NOT NULL AND user_record.password != 'hashed password' THEN
    password_valid := (user_record.password = p_password);
    IF password_valid THEN
      auth_mode := 'plain';
    END IF;
  END IF;

  -- Return authentication result
  RETURN QUERY SELECT
    user_record.id,
    user_record.username::TEXT,
    user_record.full_name::TEXT,
    user_record.role::TEXT,
    user_record.khoa_phong::TEXT,
    password_valid,
    auth_mode::TEXT;
END;
$$;

-- B∆∞·ªõc 5: Grant permissions cho h√†m
GRANT EXECUTE ON FUNCTION authenticate_user_dual_mode(TEXT, TEXT) TO anon;
GRANT EXECUTE ON FUNCTION authenticate_user_dual_mode(TEXT, TEXT) TO authenticated;

-- B∆∞·ªõc 6: S·ª≠a t√†i kho·∫£n ntchi n·∫øu c·∫ßn
-- Ki·ªÉm tra xem t√†i kho·∫£n c√≥ t·ªìn t·∫°i kh√¥ng
DO $$
DECLARE
    user_exists BOOLEAN;
BEGIN
    SELECT EXISTS(SELECT 1 FROM nhan_vien WHERE username = 'ntchi') INTO user_exists;
    
    IF user_exists THEN
        -- C·∫≠p nh·∫≠t m·∫≠t kh·∫©u v·ªõi hash bcrypt
        UPDATE nhan_vien 
        SET 
            hashed_password = crypt('admin', gen_salt('bf', 12)),
            password = 'hashed password',
            full_name = COALESCE(full_name, 'Administrator'),
            role = COALESCE(role, 'admin'),
            khoa_phong = COALESCE(khoa_phong, 'Ban Gi√°m ƒë·ªëc')
        WHERE username = 'ntchi';
        
        RAISE NOTICE 'Updated user ntchi with hashed password';
    ELSE
        -- T·∫°o t√†i kho·∫£n m·ªõi
        INSERT INTO nhan_vien (username, password, hashed_password, full_name, role, khoa_phong)
        VALUES (
            'ntchi',
            'hashed password',
            crypt('admin', gen_salt('bf', 12)),
            'Administrator',
            'admin',
            'Ban Gi√°m ƒë·ªëc'
        );
        
        RAISE NOTICE 'Created new user ntchi with hashed password';
    END IF;
END $$;

-- B∆∞·ªõc 7: Test authentication
SELECT 'AUTHENTICATION TEST' as test_type;

-- Test v·ªõi t√†i kho·∫£n ntchi/admin
SELECT 
    'ntchi/admin test' as test_name,
    user_id,
    username,
    full_name,
    role,
    is_authenticated,
    authentication_mode
FROM authenticate_user_dual_mode('ntchi', 'admin');

-- Test v·ªõi t√†i kho·∫£n admin/admin123 (n·∫øu c√≥)
SELECT 
    'admin/admin123 test' as test_name,
    user_id,
    username,
    full_name,
    role,
    is_authenticated,
    authentication_mode
FROM authenticate_user_dual_mode('admin', 'admin123');

-- B∆∞·ªõc 8: Ki·ªÉm tra k·∫øt qu·∫£ cu·ªëi c√πng
SELECT 
    'FINAL CHECK' as check_type,
    username,
    full_name,
    role,
    CASE 
        WHEN hashed_password IS NOT NULL AND hashed_password != '' THEN '‚úÖ Has hashed password'
        ELSE '‚ùå Missing hashed password'
    END as password_status
FROM nhan_vien 
WHERE username IN ('ntchi', 'admin')
ORDER BY username;

-- Th√¥ng b√°o ho√†n th√†nh
SELECT 'üéâ Authentication fix completed! Try logging in with ntchi/admin' as result;
